package com.capstone.backend.jwtAuth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import com.capstone.backend.user.RegisterRequest;
import com.capstone.backend.user.User;
import com.capstone.backend.user.UserRepository;
import com.capstone.backend.userDetails.CustomUserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;

//import com.capstone.backend.userDetails.*;

@RestController
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private CustomUserDetailsService userDetailsService;
    
    @Autowired
    private UserRepository userRepository;
    
//    @Autowired
//    private User user; 
    
    @PostMapping("/register")
    public String registerUser(@RequestBody RegisterRequest registerRequest) {
        // Check if the username or email already exists
        if (userRepository.existsByUsername(registerRequest.getUsername())) {
            throw new RuntimeException("Username already taken");
        }
        
        // Create a new user entity
        User user = new User();
        user.setusername(registerRequest.getUsername());
        
        // Hash the password before saving
        user.setPassword(passwordEncoder.encode(registerRequest.getPassword()));
        
        // Save the user to the database
        userRepository.save(user);

        return "User registered successfully";
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody AuthRequest authRequest) throws Exception {
    	try {
    		System.out.print("Entering login...");
    		Authentication authentication = authenticationManager.authenticate(
    				new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword())
    				);
    	} catch (BadCredentialsException ex) {
    		throw new Exception("Incorrect Credentials", ex);
    	}
    	
    	System.out.print("user exist...");
    	
    	UserDetails userDetails = userDetailsService.loadUserByUsername(authRequest.getUsername()); 
    			//(UserDetails) authentication.getPrincipal();
    	
    	System.out.print("generating token...");
    	
    	String jwtTok = jwtUtil.generateToken(userDetails);  
        
    	return ResponseEntity.ok().body(new AuthResponse(jwtTok));
    }
}




