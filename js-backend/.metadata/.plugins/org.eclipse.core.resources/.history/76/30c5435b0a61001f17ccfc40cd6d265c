package com.capstone.backend.user;

import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import com.capstone.backend.address.Address;
import com.capstone.backend.address.AddressRepository;
import com.capstone.backend.documents.Documents;
import com.capstone.backend.documents.DocumentsRepository;
import com.capstone.backend.notifications.NotificationsRepository;
import com.capstone.backend.settings.Settings;
import com.capstone.backend.settings.SettingsRepository;
import com.capstone.backend.userDetails.UserDetails;
import com.capstone.backend.userDetails.UserDetailsRepository;

//import com.capstone.backend.userDetails.UserDetailsRepository;
//import java.time.LocalDateTime;

@Service
public class UserService {
	
	@Autowired
    private UserRepository userRepository;

    @Autowired
    private UserDetailsRepository userDetailsRepository;

    @Autowired
    private AddressRepository addressRepository;

    @Autowired
    private DocumentsRepository documentsRepository;

    @Autowired
    private NotificationsRepository notificationsRepository;

    @Autowired
    private SettingsRepository settingsRepository;
	
	//@Autowired
	//private UserDetailsRepository userDetailsRepo;
	
	@Autowired
	private PasswordService passwordService;
	
//	public String login(LoginRequest data) throws Exception {
//		Optional<User> userOptional = userRepo.findByUserName(data.getUsername());
//		
//		if(userOptional.isPresent()) {
//			User user =  userOptional.get();
//			try {
//				if(passwordService.checkHashPass(user.getPassword(), data.getPassword())) {
//					loginUser(user);	// To handle user authentication and creation of user details
//				} else {
//					throw new Exception("User Login Failed: Check Credentials!!");
//				}
//			} catch (Exception e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		} else {
//			throw new Exception("User Login Failed: User doesn't Exist!!");
//		}
//		return "User Logged In Successfully";
//
//	}
	
	public void loginUser(User user) {
		
	}
	
	public boolean isUserExist(String username, String email) {
		User usernameOptional = userRepository.findByUserName(username);
		User emailOptional = userRepository.findByEmail(email);
		
		if(usernameOptional != null || emailOptional != null)
			return true;
		else
			return false;
	}

	public String getUserProfile() {//int userId) {
		// TODO Auto-generated method stub
		return null;
	}

	public String registerUser(User newUser) {

		// Create entry in User table
		User addeduser = userRepository.save(newUser);
		
		
		//createUserDetails(addeduser);
		// Create entry in UserDetails table
		
		
		return null;
	}
	
	public Map<String, Object> getUserProfile(Long userId) {
        Map<String, Object> response = new HashMap<>();

        // Fetch user
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found");
        }

        // Fetch user details
        UserDetails userDetails = userDetailsRepository.findById(userId).orElse(null);
        Map<String, Object> userInfo = new HashMap<>();
        userInfo.put("first_name", userDetails != null ? userDetails.getFirstName() : "");
        userInfo.put("last_name", userDetails != null ? userDetails.getLastName() : "");
        userInfo.put("email", userDetails != null ? userDetails.getEmail() : "");
        userInfo.put("phone_number", userDetails != null ? userDetails.getPhoneNumber() : "");
        userInfo.put("role", userDetails != null ? userDetails.getRole() : "");
        userInfo.put("profile_pic", userDetails != null && userDetails.getProfilePic() != null ?
                Base64.getEncoder().encodeToString(userDetails.getProfilePic()) : "");

        // Fetch address details
        Address address = addressRepository.findById(userId).orElse(null);
        Map<String, Object> addressInfo = new HashMap<>();
        addressInfo.put("street", address != null ? address.getStreet() : "");
        addressInfo.put("city", address != null ? address.getCity() : "");
        addressInfo.put("state", address != null ? address.getState() : "");
        addressInfo.put("country", address != null ? address.getCountry() : "");
        addressInfo.put("zip", address != null ? address.getZip() : "");

        // Fetch documents list
        List<Documents> userDocuments = documentsRepository.findByUserId(userId);
        List<Map<String, Object>> documentsList = userDocuments.stream()
                .map(doc -> {
                    Map<String, Object> docInfo = new HashMap<>();
                    docInfo.put("id", doc.getId());
                    docInfo.put("filename", doc.getFilename());
                    docInfo.put("filetype", doc.getFiletype());
                    docInfo.put("uploaded_on", doc.getUploadedOn().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                    return docInfo;
                })
                .collect(Collectors.toList());

        // Fetch notification settings
        NotificationsRepository notificationSettings = notificationsRepository.findById(userId).orElse(null);
        Map<String, Object> notificationInfo = new HashMap<>();
        notificationInfo.put("receive_email_alerts", notificationSettings != null ? notificationSettings.getReceiveEmailAlerts() : false);
        notificationInfo.put("job_match_alerts", notificationSettings != null ? notificationSettings.getJobMatchAlerts() : false);
        notificationInfo.put("application_status_updates", notificationSettings != null ? notificationSettings.getApplicationStatusUpdates() : false);
        notificationInfo.put("newsletter_subscription", notificationSettings != null ? notificationSettings.getNewsletterSubscription() : false);
        notificationInfo.put("receive_sms_alerts", notificationSettings != null ? notificationSettings.getReceiveEmailAlerts() : false);
        notificationInfo.put("sms_job_match_alerts", notificationSettings != null ? notificationSettings.getSmsJobMatchAlerts() : false);
        notificationInfo.put("sms_application_status_updates", notificationSettings != null ? notificationSettings.getSmsApplicationStatusUpdates() : false);
        notificationInfo.put("enable_push_notifications", notificationSettings != null ? notificationSettings.getEnablePushNotifications() : false);
        notificationInfo.put("push_job_match_alerts", notificationSettings != null ? notificationSettings.getPushJobMatchAlerts() : false);
        notificationInfo.put("push_application_status_updates", notificationSettings != null ? notificationSettings.getPushApplicationStatusUpdates() : false);
        notificationInfo.put("frequency", notificationSettings != null ? notificationSettings.getFrequency() : "");
        notificationInfo.put("do_not_disturb", notificationSettings != null ? notificationSettings.getDoNotDisturb() : false);
        notificationInfo.put("start_time", notificationSettings != null ? notificationSettings.getStartTime() : "");
        notificationInfo.put("end_time", notificationSettings != null ? notificationSettings.getEndTime() : "");

        // Fetch settings
        Settings settings = settingsRepository.findById(userId).orElse(null);
        Map<String, Object> settingsInfo = new HashMap<>();
        settingsInfo.put("auto_apply", settings != null ? settings.getAutoApply() : false);
        settingsInfo.put("job_fetching_schedule", settings != null && settings.getJobFetchingSchedule() != null ?
                settings.getJobFetchingSchedule().toLocalDate().toString() : "");
        settingsInfo.put("webscrape_sites", settings != null ? settings.getWebscrapeSites() : "");
        settingsInfo.put("match_score_cutoff", settings != null ? settings.getMatchScoreCutoff() : 0);

        response.put("user_info", userInfo);
        response.put("address", addressInfo);
        response.put("notification_settings", notificationInfo);
        response.put("settings", settingsInfo);
        response.put("documents", documentsList);

        return response;
    }

}